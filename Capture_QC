#!/bin/bash

function help()
{
cat<<END

Usage: $(readlink -f ${0}) [options] [arg]
Required: 
	--rawfq1 [raw fq1 file]
	--rawfq2 [raw fq2 file]
	--cleanfq1 [clean fq1 file]
	--cleanfq2 [clean fq2 file]
	--sortbam [sort.bam]
	--dupbam [dup.bam(mark)]
	--uniquebam [unique.bam]
	--ontargetbam [ontarget.bam]
	--readybam [ready.bam]
	--bedfile [bed file]
	-o | --outfile [the prefix of output file names]
Optional:
	--samtools [samtools path]
General:
	-h | --help [Show the help message]

Analysis Programs Created by wanhuihui [v1.1]
END
exit 0
}
 
ARGS=`getopt -o "ho:" -l "sortbam:,dupbam:,outfile:,uniquebam:,ontargetbam:,readybam:,bed:,rawfq1:,rawfq2:,cleanfq1:,cleanfq2:,bedfile:,samtools:,help" -n $0 -- "$@"`
 
eval set -- "${ARGS}"
 
while true; do
    case "${1}" in
		--sortbam)
        shift;
		sortbam=$(readlink -f ${1});shift
		if [[ ! -f ${sortbam} ]]; then
			echo "ERROR: sortbam [${sortbam}] is not exist";shift;help;
        fi
        ;;
		--dupbam)
        shift;
		dupbam=$(readlink -f ${1});shift
		if [[ ! -f ${dupbam} ]]; then
			echo "ERROR: dupbam [${dupbam}] is not exist";shift;help;
        fi
        ;;
		--uniquebam)
        shift;
		uniquebam=$(readlink -f ${1});shift
		if [[ ! -f ${uniquebam} ]]; then
			echo "ERROR: uniquebam [${uniquebam}] is not exist";shift;help;
        fi
        ;;
		--ontargetbam)
        shift;
		ontargetbam=$(readlink -f ${1});shift
		if [[ ! -f ${ontargetbam} ]]; then
			echo "ERROR: ontargetbam [${ontargetbam}] is not exist";shift;help;
        fi
        ;;
		--readybam)
        shift;
		readybam=$(readlink -f ${1});shift
		if [[ ! -f ${readybam} ]]; then
			echo "ERROR: readybam [${readybam}] is not exist";shift;help;
        fi
        ;;
		--bedfile)
        shift;
		bedfile=$(readlink -f ${1});shift
		if [[ ! -f ${bedfile} ]]; then
			echo "ERROR: bedfile [${bedfile}] is not exist";shift;help;
        fi
        ;;
		--rawfq1)
        shift;
		rawfq1=$(readlink -f ${1});shift
		if [[ ! -f ${rawfq1} ]]; then
			echo "ERROR: rawfq1 [${rawfq1}] is not exist";shift;help;
        fi
        ;;
		--rawfq2)
        shift;
		rawfq2=$(readlink -f ${1});shift
		if [[ ! -f ${rawfq2} ]]; then
			echo "ERROR: rawfq2 [${rawfq2}] is not exist";shift;help;
        fi
        ;;
		--cleanfq1)
        shift;
		cleanfq1=$(readlink -f ${1});shift
		if [[ ! -f ${cleanfq1} ]]; then
			echo "ERROR: cleanfq1 [${cleanfq1}] is not exist";shift;help;
        fi
        ;;
		--cleanfq2)
        shift;
		cleanfq2=$(readlink -f ${1});shift
		if [[ ! -f ${cleanfq2} ]]; then
			echo "ERROR: cleanfq2 [${cleanfq2}] is not exist";shift;help;
        fi
        ;;
		--samtools)
        shift;
		samtools=$(readlink -f ${1});shift
		if [[ ! -f ${samtools} ]]; then
			echo "ERROR: samtools [${samtools}] is not exist";shift;help;
        fi
        ;;
		-o|--outfile)
        shift;
		outfile=$(readlink -f ${1});shift
		;;
		-h|--help)
        shift;help;exit
		;;
        --)
        shift;
        break;
        ;;
    esac
done

if [[ ! -n ${outfile} || ! -n ${sortbam} || ! -n ${dupbam} || ! -n ${uniquebam} || ! -n ${ontargetbam} || ! -n ${bedfile} || ! -n ${readybam} || ! -n ${rawfq1} || ! -n ${rawfq2} || ! -n ${cleanfq1} || ! -n ${cleanfq2} ]];then help;fi
if [[ ! -n ${samtools} ]];then samtools=`which samtools`;fi
outdir=`dirname ${outfile}`
i=`basename ${outfile}`
bed=`basename ${bedfile}`
bin=/usr/bin

function fastq2stat()
{
	fastq=$1
	stat=$2
	if [[ $fq1 =~ .gz$ ]];then bb=zcat; else bb=cat;fi
	$bb $fastq | awk 'BEGIN {FS=""} {if(NR%4==2){sum_read++;for(i=1;i<=NF;++i){if($i!=""){++sum_base};if($i=="G"||$i=="C"){++sum_gc}}};if(NR%4==0){for(i=1;i<=NF;++i){if($i>="4") {++sum_q20base};if($i>=">") {++sum_q30base}}}} END {q20_rate=sum_q20base/sum_base*100;q30_rate=sum_q30base/sum_base*100;gc_rate=sum_gc/sum_base*100;print "Total Num of Reads:"sum_read"\n""Total Base Length:"sum_base"\n""Q20 Base:"sum_q20base"\n""Q30 Base:"sum_q30base"\n""Q20%:"q20_rate"%""\n""Q30%:"q30_rate"%""\n""GC%:"gc_rate"%"}' > $outdir/$stat
}
export -f fastq2stat
function QC_Analysis()
{
	#fastq QC
	rawfq1_stat=`echo $rawfq1 | awk '{n=split($1,a,"/");print a[n]}' |sed "s/.gz$/.stat/g"`
	rawfq2_stat=`echo $rawfq2 | awk '{n=split($1,a,"/");print a[n]}' |sed "s/.gz$/.stat/g"`
	cleanfq1_stat=`echo $cleanfq1 | awk '{n=split($1,a,"/");print a[n]}' |sed "s/$/.stat/g"`
	cleanfq2_stat=`echo $cleanfq2 | awk '{n=split($1,a,"/");print a[n]}' |sed "s/$/.stat/g"`
	fastq2stat $rawfq1 $rawfq1_stat &
	fastq2stat $rawfq2 $rawfq2_stat &
	fastq2stat $cleanfq1 $cleanfq1_stat &
	fastq2stat $cleanfq2 $cleanfq2_stat &
	
	#bam QC
	$samtools stats $sortbam |grep ^SN | cut -f 2- >$outdir/${i}.stat & 
	$samtools stats $dupbam | grep ^SN | cut -f 2- >$outdir/${i}.dup.stat & 
	$samtools stats $uniquebam | grep ^SN | cut -f 2- >$outdir/${i}.unique.stat & 
	$samtools stats $ontargetbam | grep ^SN | cut -f 2- >$outdir/${i}.ontarget.stat & 
	######Coverage######
	$samtools depth -d 100000 -a -b ${bedfile} $readybam >$outdir/${i}.${bed}.depth && less $outdir/${i}.${bed}.depth |cut -f3 |sort -n >$outdir/${i}.${bed}.all.depth &
	
	wait
	
	######Title R1#####  
	echo -ne "#SampleName\tPanelInformation\tAverage_depth\tOntarget_reads_ratio\tMapped_ratio\tUniformity\tOntarget_Coverage\tRaw_R1_Bases\tRaw_R1_Q30_Bases\tRaw_R1_Q30%\t" >$outdir/${i}.Sequencing.QC.xls
	echo -ne "Raw_R1_Q20_Bases\tRaw_R1_Q20%\t" >>$outdir/${i}.Sequencing.QC.xls
	echo -ne "Raw_R2_Bases\tRaw_R2_Q30_Bases\tRaw_R2_Q30%\t" >>$outdir/${i}.Sequencing.QC.xls
	echo -ne "Raw_R2_Q20_Bases\tRaw_R2_Q20%\t" >>$outdir/${i}.Sequencing.QC.xls
	######Title R2#####        
	echo -ne "Clean_R1_Bases\tClean_R1_Q30_Bases\tClean_R1_Q30%\t" >>$outdir/${i}.Sequencing.QC.xls
	echo -ne "Clean_R1_Q20_Bases\tClean_R1_Q20%\t" >>$outdir/${i}.Sequencing.QC.xls
	echo -ne "Clean_R2_Bases\tClean_R2_Q30_Bases\tClean_R2_Q30%\t" >>$outdir/${i}.Sequencing.QC.xls
	echo -ne "Clean_R2_Q20_Bases\tClean_R2_Q20%\t" >>$outdir/${i}.Sequencing.QC.xls
	echo -ne "Average_read_length\tAverage_base_quality\tAverage_insert_size\tDuplication_rate(%)\tRaw_reads\tRaw_bases\tClean_reads\tClean_bases\tMapped_reads\tMapped_bases\tOntarget_reads\tOntarget_bases\tOntarget_bases_ratio\t" >>$outdir/${i}.Sequencing.QC.xls
	######Mappering Title#####
	echo -ne "1X coverage rate(%)\t4X coverage rate(%)\t10X coverage rate(%)\t20X coverage rate(%)\t50X coverage rate(%)\t100X coverage rate(%)\t200X coverage rate(%)\t500X coverage rate(%)\tMedian_depth\tMode_insert_size\n" >>$outdir/${i}.Sequencing.QC.xls
   
	###Conclusion###
	Raw_reads=`expr $(cat $outdir/${rawfq1_stat}|awk '$0~/Total Num of Reads:/{split($0,a,":");printf a[2]}') + $(cat $outdir/${rawfq2_stat}|awk '$0~/Total Num of Reads:/{split($0,a,":");printf a[2]}')`
	Raw_bases=`expr $(cat $outdir/${rawfq1_stat}|awk '$0~/Total Base Length:/{split($0,a,":");printf a[2]}') + $(cat $outdir/${rawfq2_stat}|awk '$0~/Total Base Length:/{split($0,a,":");printf a[2]}')`
	Clean_reads=`expr $(cat $outdir/${cleanfq1_stat}|awk '$0~/Total Num of Reads:/{split($0,a,":");printf a[2]}') + $(cat $outdir/${cleanfq2_stat}|awk '$0~/Total Num of Reads:/{split($0,a,":");printf a[2]}')`
	Clean_bases=`expr $(cat $outdir/${cleanfq1_stat}|awk '$0~/Total Base Length:/{split($0,a,":");printf a[2]}') + $(cat $outdir/${cleanfq2_stat}|awk '$0~/Total Base Length:/{split($0,a,":");printf a[2]}')`
	Unique_reads=`cat $outdir/${i}.unique.stat|awk '$0~/reads mapped:/{split($0,a,"\t");printf a[2]}'`
	Unique_bases=`cat $outdir/${i}.unique.stat|awk '$0~/bases mapped:/{split($0,a,"\t");printf a[2]}'`
	##Duplication rate(%###
	Duplicate_reads=`cat $outdir/${i}.dup.stat|awk '$0~/reads duplicated:/{split($0,a,"\t");printf a[2]}'`
	Duplication_rate=`echo $Duplicate_reads $Clean_reads | awk '{printf("%0.2f%\n",$1*100/$2)}'`
   
	#Duplication rate(%ï¼‰
	
	###Accurate mapping rate(%)###
	Accurate_mapping_reads=`cat $outdir/${i}.stat|awk '$0~/reads mapped:/{split($0,a,":");printf a[2]"\t"}'`  
	Accurate_mapping_rate=`echo $Accurate_mapping_reads $Clean_reads | awk '{printf("%0.2f%\n",$1*100/$2)}'`
																   #Accurate mapping rate(%)
   
	####Reads_capture_rate(%)###
	Target_overlaped_reads=`cat $outdir/${i}.ontarget.stat|awk '$0~/reads mapped:/{split($0,a,"\t");printf a[2]}'`
	Reads_capture_rate=`echo $Target_overlaped_reads $Unique_reads | awk '{printf("%0.2f%\n",$1*100/$2)}'`
	
	###Bases_capture_rate(%)###
	Target_effective_bases=`awk '{sum += $3};END {print sum}' $outdir/${i}.${bed}.depth`
	Bases_capture_rate=`echo $Target_effective_bases $Unique_bases | awk '{printf("%0.2f%\n",$1*100/$2)}'`
	
	###Coverage Calucate####
	coverage_bases=`cat $outdir/${i}.${bed}.all.depth|wc -l`
	coverage_1x=`awk '$1>=1 {sum += 1};END {print sum}' $outdir/${i}.${bed}.all.depth`
	coverage_4x=`awk '$1>=4 {sum += 1};END {print sum}' $outdir/${i}.${bed}.all.depth`
	coverage_10x=`awk '$1>=10 {sum += 1};END {print sum}' $outdir/${i}.${bed}.all.depth`
	coverage_20x=`awk '$1>=20 {sum += 1};END {print sum}' $outdir/${i}.${bed}.all.depth`
	coverage_50x=`awk '$1>=50 {sum += 1};END {print sum}' $outdir/${i}.${bed}.all.depth`
	coverage_100x=`awk '$1>=100 {sum += 1};END {print sum}' $outdir/${i}.${bed}.all.depth`
	coverage_200x=`awk '$1>=200 {sum += 1};END {print sum}' $outdir/${i}.${bed}.all.depth`
	coverage_500x=`awk '$1>=500 {sum += 1};END {print sum}' $outdir/${i}.${bed}.all.depth`
	coverage_sum=`awk '$1>0 {sum += $1};END {print sum}' $outdir/${i}.${bed}.all.depth`
	
	coverage_1x_rate=`echo $coverage_1x $coverage_bases | awk '{printf("%0.2f%\n",$1*100/$2)}'`
	coverage_4x_rate=`echo $coverage_4x $coverage_bases | awk '{printf("%0.2f%\n",$1*100/$2)}'`
	coverage_10x_rate=`echo $coverage_10x $coverage_bases | awk '{printf("%0.2f%\n",$1*100/$2)}'`
	coverage_20x_rate=`echo $coverage_20x $coverage_bases | awk '{printf("%0.2f%\n",$1*100/$2)}'`
	coverage_50x_rate=`echo $coverage_50x $coverage_bases | awk '{printf("%0.2f%\n",$1*100/$2)}'`
	coverage_100x_rate=`echo $coverage_100x $coverage_bases | awk '{printf("%0.2f%\n",$1*100/$2)}'`
	coverage_200x_rate=`echo $coverage_200x $coverage_bases | awk '{printf("%0.2f%\n",$1*100/$2)}'`
	coverage_500x_rate=`echo $coverage_500x $coverage_bases | awk '{printf("%0.2f%\n",$1*100/$2)}'`
	
	average_coverage=$(printf "%d" $((coverage_sum/coverage_bases)))
	median_coverage=`less $outdir/${i}.${bed}.all.depth|wc -l | xargs -i expr {} / 2 + 1 | xargs -i sed -n {}p $outdir/${i}.${bed}.all.depth`
	Uniformity_x=`awk -v average_coverage=$average_coverage '$1>=(average_coverage*0.25) {sum += 1};END {print sum}' $outdir/${i}.${bed}.all.depth`
	Uniformity=`echo $Uniformity_x $coverage_bases | awk '{printf("%0.2f%\n",$1*100/$2)}'`
	Mode_insert_size=`less $outdir/${i}.insert_size_metrics.txt | sed -n 8p | cut -f2`
	
	
	 ######Raw Data#####
	echo -ne "${i}\t${bed}\t$average_coverage\t$Reads_capture_rate\t$Accurate_mapping_rate\t$Uniformity\t$coverage_1x_rate\t" >>$outdir/${i}.Sequencing.QC.xls
	cat $outdir/${rawfq1_stat}|awk '$0~/Total Base Length:/{split($0,a,":");printf a[2]"\t"}' >>$outdir/${i}.Sequencing.QC.xls
	cat $outdir/${rawfq1_stat}|awk '$0~/Q30 Base:/{split($0,a,":");printf a[2]"\t"}' >>$outdir/${i}.Sequencing.QC.xls
	cat $outdir/${rawfq1_stat}|awk '$0~/Q30\%:/{split($0,a,":");printf a[2]"\t"}' >>$outdir/${i}.Sequencing.QC.xls
	cat $outdir/${rawfq1_stat}|awk '$0~/Q20 Base:/{split($0,a,":");printf a[2]"\t"}' >>$outdir/${i}.Sequencing.QC.xls
	cat $outdir/${rawfq1_stat}|awk '$0~/Q20\%:/{split($0,a,":");printf a[2]"\t"}' >>$outdir/${i}.Sequencing.QC.xls
	cat $outdir/${rawfq2_stat}|awk '$0~/Total Base Length:/{split($0,a,":");printf a[2]"\t"}' >>$outdir/${i}.Sequencing.QC.xls
	cat $outdir/${rawfq2_stat}|awk '$0~/Q30 Base:/{split($0,a,":");printf a[2]"\t"}' >>$outdir/${i}.Sequencing.QC.xls
	cat $outdir/${rawfq2_stat}|awk '$0~/Q30\%:/{split($0,a,":");printf a[2]"\t"}' >>$outdir/${i}.Sequencing.QC.xls
	cat $outdir/${rawfq2_stat}|awk '$0~/Q20 Base:/{split($0,a,":");printf a[2]"\t"}' >>$outdir/${i}.Sequencing.QC.xls
	cat $outdir/${rawfq2_stat}|awk '$0~/Q20\%:/{split($0,a,":");printf a[2]"\t"}' >>$outdir/${i}.Sequencing.QC.xls
	######Clean Data####
	cat $outdir/${cleanfq1_stat}|awk '$0~/Total Base Length:/{split($0,a,":");printf a[2]"\t"}' >>$outdir/${i}.Sequencing.QC.xls
	cat $outdir/${cleanfq1_stat}|awk '$0~/Q30 Base:/{split($0,a,":");printf a[2]"\t"}' >>$outdir/${i}.Sequencing.QC.xls
	cat $outdir/${cleanfq1_stat}|awk '$0~/Q30\%:/{split($0,a,":");printf a[2]"\t"}' >>$outdir/${i}.Sequencing.QC.xls
	cat $outdir/${cleanfq1_stat}|awk '$0~/Q20 Base:/{split($0,a,":");printf a[2]"\t"}' >>$outdir/${i}.Sequencing.QC.xls
	cat $outdir/${cleanfq1_stat}|awk '$0~/Q20\%:/{split($0,a,":");printf a[2]"\t"}' >>$outdir/${i}.Sequencing.QC.xls
	cat $outdir/${cleanfq2_stat}|awk '$0~/Total Base Length:/{split($0,a,":");printf a[2]"\t"}' >>$outdir/${i}.Sequencing.QC.xls
	cat $outdir/${cleanfq2_stat}|awk '$0~/Q30 Base:/{split($0,a,":");printf a[2]"\t"}' >>$outdir/${i}.Sequencing.QC.xls
	cat $outdir/${cleanfq2_stat}|awk '$0~/Q30\%:/{split($0,a,":");printf a[2]"\t"}' >>$outdir/${i}.Sequencing.QC.xls
	cat $outdir/${cleanfq2_stat}|awk '$0~/Q20 Base:/{split($0,a,":");printf a[2]"\t"}' >>$outdir/${i}.Sequencing.QC.xls
	cat $outdir/${cleanfq2_stat}|awk '$0~/Q20\%:/{split($0,a,":");printf a[2]"\t"}' >>$outdir/${i}.Sequencing.QC.xls

	######Mapping Data####
	cat $outdir/${i}.stat|awk '$0~/average length:/{split($0,a,"\t");printf a[2]"\t"}' >>$outdir/${i}.Sequencing.QC.xls            #Average_read_length
	cat $outdir/${i}.stat|awk '$0~/average quality:/{split($0,a,"\t");printf a[2]"\t"}' >>$outdir/${i}.Sequencing.QC.xls           #Average_base_quality
	cat $outdir/${i}.stat|awk '$0~/insert size average:/{split($0,a,"\t");printf a[2]"\t"}' >>$outdir/${i}.Sequencing.QC.xls       #Average_insert_size
	
	echo -ne "$Duplication_rate\t" >>$outdir/${i}.Sequencing.QC.xls 
	echo -ne $Raw_reads"\t" >> $outdir/${i}.Sequencing.QC.xls
	echo -ne $Raw_reads"\t" >> $outdir/${i}.Sequencing.QC.xls
	echo -ne $Clean_reads"\t" >> $outdir/${i}.Sequencing.QC.xls
	echo -ne $Clean_bases"\t" >> $outdir/${i}.Sequencing.QC.xls
	cat $outdir/${i}.stat|awk '$0~/reads mapped:/{split($0,a,"\t");printf a[2]"\t"}' >>$outdir/${i}.Sequencing.QC.xls               #Mapped reads
	cat $outdir/${i}.stat|awk '$0~/bases mapped \(cigar\):/{split($0,a,"\t");printf a[2]"\t"}' >>$outdir/${i}.Sequencing.QC.xls     #Accurate_mapped_bases
	cat $outdir/${i}.ontarget.stat|awk '$0~/reads mapped:/{split($0,a,"\t");printf a[2]"\t"}' >>$outdir/${i}.Sequencing.QC.xls     #Target_overlaped_reads
	echo -ne "$Target_effective_bases\t" >>$outdir/${i}.Sequencing.QC.xls                                                               #Target_effective_bases
	echo -ne "$Bases_capture_rate\t" >>$outdir/${i}.Sequencing.QC.xls                                                                   #Bases_capture_rate(%)
	
	echo -ne "$coverage_1x_rate\t$coverage_4x_rate\t$coverage_10x_rate\t$coverage_20x_rate\t$coverage_50x_rate\t$coverage_100x_rate\t$coverage_200x_rate\t$coverage_500x_rate\t$median_coverage\t$Mode_insert_size\n" >>$outdir/${i}.Sequencing.QC.xls
}
QC_Analysis