#!/bin/bash

function help()
{
cat<<END

Usage: $(readlink -f ${0}) [options] [arg]
Required: 
	-i | --inputfile [bamfile]
	-r | --reference [Copy number reference file (.cnn)]
	-g | --genelist [cnvkit genelist]
	-o | --outfile [the prefix of output file names]
Optional:
	-t | --threads [Number of subprocesses used to running in parallel. Default: 4]
	-p | --python  [python_path]
	-c | --cnvkit [cnvkit_path]
General:
	-h | --help [Show the help message]

Analysis Programs Created by wanhuihui [v1.1]
END
exit 0
}
 
ARGS=`getopt -o "ht:o:i:p:c:r:g:" -l "outfile:,inputfile:,python:,cnvkit:,threads:,reference:,genelist:,help" -n $0 -- "$@"`
 
eval set -- "${ARGS}"
 
while true; do
    case "${1}" in
        -p|--python)
        shift;
		python=${1};shift
		if [[ ! -f ${python} ]]; then
			echo "ERROR: python [${python}] is not exist";shift;help;
        fi
        ;;
        -c|--cnvkit)
        shift;
		cnvkit=${1};shift
		if [[ ! -f ${cnvkit} ]]; then
			echo "ERROR: cnvkit [${cnvkit}] is not exist";shift;help;
        fi
        ;;
		-i|--inputfile)
        shift;
		inputfile=$(readlink -f ${1});shift
		if [[ ! -f ${inputfile} ]]; then
			echo "ERROR: inputfile [${inputfile}] is not exist";shift;help;
        fi
        ;;
		-r|--reference)
        shift;
		reference=$(readlink -f ${1});shift
		if [[ ! -f ${reference} ]]; then
			echo "ERROR: reference [${reference}] is not exist";shift;help;
        fi
        ;;
		-g|--genelist)
        shift;
		genelist=$(readlink -f ${1});shift
		if [[ ! -f ${genelist} ]]; then
			echo "ERROR: genelist [${genelist}] is not exist";shift;help;
        fi
        ;;
		-o|--outfile)
        shift;
		outfile=$(readlink -f ${1});shift
		;;
		-t|--threads)
        shift;
		threads=${1};shift
		;;
		-h|--help)
        shift;help;exit
		;;
        --)
        shift;
        break;
        ;;
    esac
done

if [[ ! -n ${inputfile} || ! -n ${outfile} || ! -n ${reference} || ! -n ${genelist} ]];then help;fi
if [[ ! -n ${threads} ]];then threads=4;fi
if [[ ! -n ${python} ]];then python=`which python3`;fi
if [[ ! -n ${cnvkit} ]];then cnvkit=`which cnvkit.py`;fi
outdir=`dirname ${outfile}`
i=`basename ${outfile}`
bam_prefix=`basename $inputfile | sed "s/.bam$//g"`

function cnvkit_Analysis()
{
	$python $cnvkit batch --method hybrid $inputfile -r $reference -p $threads -d $outdir
	sed '/\t$/d' -i $outdir/${bam_prefix}.cnr
	$python $cnvkit segment $outdir/${bam_prefix}.cnr -o $outdir/${bam_prefix}.cns
	$python $cnvkit call $outdir/${bam_prefix}.cns -o $outdir/${i}.call.cns
	$python $cnvkit call $outdir/${bam_prefix}.cnr -o $outdir/${i}.call.cnr
	
	echo -e "Gene\tCytoBand\tCopyNumber\tAmp/Del" > $outdir/${i}.MET_ERBB2.copynumber
    less $genelist |while read j;do
        gene_cn="" ; gene_var1="" ; gene_var2="" ;
        j1=`echo "$j"|cut -f1` ;jc=`echo "$j"|cut -f2`
        gene_cn=`cat $outdir/${i}.call.cns |grep -w "$j1" |cut -f6`
        if [ `cat $outdir/${i}.call.cns |grep -w "$j1"|wc -l` -ge 1 ];then
        	gene_cn=`echo $gene_cn | awk 'BEGIN {FS=" "} {sum=0;for(i=1;i<=NF;i++){sum=sum+$i};printf("%0.0f\n",sum/NF)}'`
			if [ $j1 == "TP53" ];then
				if [ $gene_cn -gt 0 ];then gene_var1="$j1""基因拷贝数无缺失, CN=$gene_cn" ;gene_var2="CN=$gene_cn,无缺失" ;
				else gene_var1="$j1""基因拷贝数缺失, CN=$gene_cn" ; gene_var2="CN=$gene_cn,缺失" ; fi
			else
				if [ $gene_cn -gt 2 ];then gene_var1="$j1""基因拷贝数扩增, CN=$gene_cn" ;gene_var2="CN=$gene_cn,扩增" ;
				elif [ $gene_cn -lt 1 ];then gene_var1="$j1""基因拷贝数缺失" ;gene_var2="CN=$gene_cn,缺失" ;
				else gene_var1="$j1""基因拷贝数无扩增, CN=$gene_cn" ; gene_var2="CN=$gene_cn,无扩增" ; fi
			fi
			echo -e "${j1}\t${jc}\t${gene_var1}\t${gene_var2}" >> $outdir/${i}.MET_ERBB2.copynumber
        fi
    done
}
cnvkit_Analysis